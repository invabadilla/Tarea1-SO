
Tarea1-SO.elf:     file format elf32-littlenios2
Tarea1-SO.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004180

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00000744 memsz 0x00000744 flags r-x
    LOAD off    0x00002000 vaddr 0x00000000 paddr 0x00004764 align 2**12
         filesz 0x00000004 memsz 0x0000014c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000005e4  00004180  00004180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00000000  00004768  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  00000000  00004764  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000148  00000004  00004768  00002004  2**2
                  ALLOC, SMALL_DATA
  6 .RAM_0        00000000  0000014c  0000014c  00002004  2**0
                  CONTENTS
  7 .ROM_0        00000000  00004768  00004768  00002004  2**0
                  CONTENTS
  8 .comment      0000002c  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000218  00000000  00000000  00002030  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00007141  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001a28  00000000  00000000  00009389  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001a68  00000000  00000000  0000adb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000264  00000000  00000000  0000c81c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000104b  00000000  00000000  0000ca80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000651  00000000  00000000  0000dacb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0000e11c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001c8  00000000  00000000  0000e130  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000f3f0  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0000f3f3  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000f3f8  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000f3f9  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000004  00000000  00000000  0000f3fa  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  0000f3fe  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000004  00000000  00000000  0000f402  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  0000f406  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001e  00000000  00000000  0000f40e  2**0
                  CONTENTS, READONLY
 27 .jdi          000000e4  00000000  00000000  0000f42c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004180 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000000 l    d  .rwdata	00000000 .rwdata
00000004 l    d  .bss	00000000 .bss
0000014c l    d  .RAM_0	00000000 .RAM_0
00004768 l    d  .ROM_0	00000000 .ROM_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/Proyectos/Quartus/Tarea1-SO/software/Tarea1-SO_bsp/obj/HAL/src/crt0.o
000041b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
000041bc l     F .text	00000024 button_0_isr
00000008 l     O .bss	00000004 start
0000000c l     O .bss	00000004 play
000041e0 l     F .text	00000088 decimalToSegm
00004268 l     F .text	000001b8 timer_isr
0000002c l     O .bss	00000004 ms_unit
00000030 l     O .bss	00000004 ms_tens
00000024 l     O .bss	00000004 s_unit
00000028 l     O .bss	00000004 s_tens
0000001c l     O .bss	00000004 min_unit
00000020 l     O .bss	00000004 min_tens
00000004 l     O .bss	00000004 mode
00000034 l     O .bss	00000004 ms_cent
00000018 l     O .bss	00000004 ms_segm
00000014 l     O .bss	00000004 s_segm
00000010 l     O .bss	00000004 min_segm
00004420 l     F .text	0000004c button_1_isr
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000048 g     O .bss	00000004 alt_instruction_exception_handler
00004694 g     F .text	0000002c alt_main
0000004c g     O .bss	00000100 alt_irq
00004764 g       *ABS*	00000000 __flash_rwdata_start
0000475c g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00000040 g     O .bss	00000004 alt_argv
00008000 g       *ABS*	00000000 _gp
000046ec g     F .text	00000070 alt_exception_cause_generated_bad_addr
00000000 g       *ABS*	00000000 __alt_mem_RAM_0
0000014c g       *ABS*	00000000 __bss_end
00004578 g     F .text	00000068 alt_iic_isr_register
00004560 g     F .text	00000018 alt_ic_irq_enabled
00000038 g     O .bss	00000004 alt_irq_active
000040fc g     F .exceptions	00000060 alt_irq_handler
000046e4 g     F .text	00000004 alt_dcache_flush_all
00000004 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __ram_rodata_end
0000014c g       *ABS*	00000000 end
0000415c g     F .exceptions	00000024 alt_instruction_exception_entry
00004000 g       *ABS*	00000000 __alt_stack_pointer
00004000 g       *ABS*	00000000 __alt_mem_ROM_0
00004180 g     F .text	0000003c _start
000046e0 g     F .text	00000004 alt_sys_init
00000000 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
0000014c g       *ABS*	00000000 __alt_stack_base
00000004 g       *ABS*	00000000 __bss_start
0000446c g     F .text	00000080 main
0000003c g     O .bss	00000004 alt_envp
00004764 g       *ABS*	00000000 __flash_rodata_start
000046c0 g     F .text	00000020 alt_irq_init
00000044 g     O .bss	00000004 alt_argc
00004020 g       .exceptions	00000000 alt_irq_entry
00004020 g       *ABS*	00000000 __ram_exceptions_start
000044ec g     F .text	00000004 alt_ic_isr_register
00000004 g       *ABS*	00000000 _edata
0000014c g       *ABS*	00000000 _end
00004180 g       *ABS*	00000000 __ram_exceptions_end
00004528 g     F .text	00000038 alt_ic_irq_disable
00004000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
0000400c g       .entry	00000000 _exit
000046e8 g     F .text	00000004 alt_icache_flush_all
00000000 g     O .rwdata	00000004 alt_priority_mask
000044f0 g     F .text	00000038 alt_ic_irq_enable
000045e0 g     F .text	000000b4 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08506014 	ori	at,at,16768
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .exceptions:

00004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    4044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040fc0 	call	40fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000706 	br	40a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    4094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    4098:	000415c0 	call	415c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    409c:	1000021e 	bne	r2,zero,40a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    40a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    40a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    40a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    40ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    40d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    40f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40f8:	ef80083a 	eret

000040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40fc:	defffe04 	addi	sp,sp,-8
    4100:	dfc00115 	stw	ra,4(sp)
    4104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    410c:	04000034 	movhi	r16,0
    4110:	84001304 	addi	r16,r16,76
    i = 0;
    4114:	0005883a 	mov	r2,zero
    mask = 1;
    4118:	00c00044 	movi	r3,1
      if (active & mask)
    411c:	20ca703a 	and	r5,r4,r3
    4120:	28000b26 	beq	r5,zero,4150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
    4124:	100490fa 	slli	r2,r2,3
    4128:	8085883a 	add	r2,r16,r2
    412c:	10c00017 	ldw	r3,0(r2)
    4130:	11000117 	ldw	r4,4(r2)
    4134:	183ee83a 	callr	r3
    4138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    413c:	203ff51e 	bne	r4,zero,4114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    4140:	dfc00117 	ldw	ra,4(sp)
    4144:	dc000017 	ldw	r16,0(sp)
    4148:	dec00204 	addi	sp,sp,8
    414c:	f800283a 	ret
      mask <<= 1;
    4150:	1806907a 	slli	r3,r3,1
      i++;
    4154:	10800044 	addi	r2,r2,1
      if (active & mask)
    4158:	003ff006 	br	411c <alt_irq_handler+0x20>

0000415c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    415c:	d0a01217 	ldw	r2,-32696(gp)
{
    4160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
    4164:	10000326 	beq	r2,zero,4174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    4168:	000d883a 	mov	r6,zero
    416c:	013fffc4 	movi	r4,-1
    4170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    4174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    4178:	0005883a 	mov	r2,zero
    417c:	f800283a 	ret

Disassembly of section .text:

00004180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4184:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
    4188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    418c:	d6a00014 	ori	gp,gp,32768
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4194:	10800114 	ori	r2,r2,4

    movhi r3, %hi(__bss_end)
    4198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    419c:	18c05314 	ori	r3,r3,332

    beq r2, r3, 1f
    41a0:	10c00326 	beq	r2,r3,41b0 <_start+0x30>

0:
    stw zero, (r2)
    41a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    41a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    41ac:	10fffd36 	bltu	r2,r3,41a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    41b0:	00045e00 	call	45e0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    41b4:	00046940 	call	4694 <alt_main>

000041b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    41b8:	003fff06 	br	41b8 <alt_after_alt_main>

000041bc <button_0_isr>:
}

static void button_0_isr(void *context){
	(void) context;
	//Changing from play and pause if the stopwatch has started
	if (start == 1){
    41bc:	d0a00217 	ldw	r2,-32760(gp)
    41c0:	10800058 	cmpnei	r2,r2,1
    41c4:	1000031e 	bne	r2,zero,41d4 <button_0_isr+0x18>
		play = !play;
    41c8:	d0a00317 	ldw	r2,-32756(gp)
    41cc:	1005003a 	cmpeq	r2,r2,zero
    41d0:	d0a00315 	stw	r2,-32756(gp)
	}
	//Cleaning the edge and preventing spurious interrupt
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_0_BASE, 0);
    41d4:	00141b35 	stwio	zero,20588(zero)
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_0_BASE);
    41d8:	00941b37 	ldwio	r2,20588(zero)
}
    41dc:	f800283a 	ret

000041e0 <decimalToSegm>:
	if (decimal == 0){return 0b1000000;}
    41e0:	20001126 	beq	r4,zero,4228 <decimalToSegm+0x48>
	else if (decimal == 1){return 0b1111001;}
    41e4:	20800060 	cmpeqi	r2,r4,1
    41e8:	1000111e 	bne	r2,zero,4230 <decimalToSegm+0x50>
	else if (decimal == 2){return 0b0100100;}
    41ec:	208000a0 	cmpeqi	r2,r4,2
    41f0:	1000111e 	bne	r2,zero,4238 <decimalToSegm+0x58>
	else if (decimal == 3){return 0b0110000;}
    41f4:	208000e0 	cmpeqi	r2,r4,3
    41f8:	1000111e 	bne	r2,zero,4240 <decimalToSegm+0x60>
	else if (decimal == 4){return 0b0011001;}
    41fc:	20800120 	cmpeqi	r2,r4,4
    4200:	1000111e 	bne	r2,zero,4248 <decimalToSegm+0x68>
	else if (decimal == 5){return 0b0010010;}
    4204:	20800160 	cmpeqi	r2,r4,5
    4208:	1000111e 	bne	r2,zero,4250 <decimalToSegm+0x70>
	else if (decimal == 6){return 0b0000010;}
    420c:	208001a0 	cmpeqi	r2,r4,6
    4210:	1000111e 	bne	r2,zero,4258 <decimalToSegm+0x78>
	else if (decimal == 7){return 0b1111000;}
    4214:	208001e0 	cmpeqi	r2,r4,7
    4218:	1000111e 	bne	r2,zero,4260 <decimalToSegm+0x80>
	else{return 0;}
    421c:	20800260 	cmpeqi	r2,r4,9
    4220:	1004913a 	slli	r2,r2,4
    4224:	f800283a 	ret
	if (decimal == 0){return 0b1000000;}
    4228:	00801004 	movi	r2,64
    422c:	f800283a 	ret
	else if (decimal == 1){return 0b1111001;}
    4230:	00801e44 	movi	r2,121
    4234:	f800283a 	ret
	else if (decimal == 2){return 0b0100100;}
    4238:	00800904 	movi	r2,36
    423c:	f800283a 	ret
	else if (decimal == 3){return 0b0110000;}
    4240:	00800c04 	movi	r2,48
    4244:	f800283a 	ret
	else if (decimal == 4){return 0b0011001;}
    4248:	00800644 	movi	r2,25
    424c:	f800283a 	ret
	else if (decimal == 5){return 0b0010010;}
    4250:	00800484 	movi	r2,18
    4254:	f800283a 	ret
	else if (decimal == 6){return 0b0000010;}
    4258:	00800084 	movi	r2,2
    425c:	f800283a 	ret
	else if (decimal == 7){return 0b1111000;}
    4260:	00801e04 	movi	r2,120
}
    4264:	f800283a 	ret

00004268 <timer_isr>:
	if (play == 1){
    4268:	d0a00317 	ldw	r2,-32756(gp)
static void timer_isr(void *context){
    426c:	defffd04 	addi	sp,sp,-12
    4270:	dfc00215 	stw	ra,8(sp)
    4274:	dc400115 	stw	r17,4(sp)
    4278:	dc000015 	stw	r16,0(sp)
	if (play == 1){
    427c:	10800058 	cmpnei	r2,r2,1
    4280:	1000031e 	bne	r2,zero,4290 <timer_isr+0x28>
		ms_unit += 1;
    4284:	d0a00b17 	ldw	r2,-32724(gp)
    4288:	10800044 	addi	r2,r2,1
    428c:	d0a00b15 	stw	r2,-32724(gp)
	if (ms_unit >= 10){
    4290:	d0a00b17 	ldw	r2,-32724(gp)
    4294:	108002a8 	cmpgeui	r2,r2,10
    4298:	10000726 	beq	r2,zero,42b8 <timer_isr+0x50>
		ms_tens +=1;
    429c:	d0a00c17 	ldw	r2,-32720(gp)
		ms_unit = 0;
    42a0:	d0200b15 	stw	zero,-32724(gp)
    42a4:	d0e00917 	ldw	r3,-32732(gp)
		ms_tens +=1;
    42a8:	10800044 	addi	r2,r2,1
		if (ms_tens >= 10){
    42ac:	110002a8 	cmpgeui	r4,r2,10
    42b0:	2000301e 	bne	r4,zero,4374 <timer_isr+0x10c>
		ms_tens +=1;
    42b4:	d0a00c15 	stw	r2,-32720(gp)
	if (s_unit >= 10){
    42b8:	d0a00917 	ldw	r2,-32732(gp)
    42bc:	108002a8 	cmpgeui	r2,r2,10
    42c0:	10000726 	beq	r2,zero,42e0 <timer_isr+0x78>
		s_tens +=1;
    42c4:	d0a00a17 	ldw	r2,-32728(gp)
		s_unit = 0;
    42c8:	d0200915 	stw	zero,-32732(gp)
    42cc:	d0e00717 	ldw	r3,-32740(gp)
		s_tens +=1;
    42d0:	10800044 	addi	r2,r2,1
		if (s_tens >= 6){
    42d4:	110001a8 	cmpgeui	r4,r2,6
    42d8:	2000311e 	bne	r4,zero,43a0 <timer_isr+0x138>
		s_tens +=1;
    42dc:	d0a00a15 	stw	r2,-32728(gp)
	if (min_unit >= 10){
    42e0:	d0a00717 	ldw	r2,-32740(gp)
    42e4:	108002a8 	cmpgeui	r2,r2,10
    42e8:	10000626 	beq	r2,zero,4304 <timer_isr+0x9c>
		min_tens +=1;
    42ec:	d0a00817 	ldw	r2,-32736(gp)
		min_unit = 0;
    42f0:	d0200715 	stw	zero,-32740(gp)
		min_tens +=1;
    42f4:	10800044 	addi	r2,r2,1
		if (min_tens >= 10){
    42f8:	10c002a8 	cmpgeui	r3,r2,10
    42fc:	18002c1e 	bne	r3,zero,43b0 <timer_isr+0x148>
		min_tens +=1;
    4300:	d0a00815 	stw	r2,-32736(gp)
	if (mode == 0 || mode == 2){
    4304:	d4600117 	ldw	r17,-32764(gp)
    4308:	00bfff44 	movi	r2,-3
    430c:	8884703a 	and	r2,r17,r2
    4310:	1000291e 	bne	r2,zero,43b8 <timer_isr+0x150>
		ms_segm = (decimalToSegm(ms_cent) << 7) | decimalToSegm(ms_tens);
    4314:	d1200d17 	ldw	r4,-32716(gp)
    4318:	00041e00 	call	41e0 <decimalToSegm>
    431c:	1021883a 	mov	r16,r2
    4320:	d1200c17 	ldw	r4,-32720(gp)
    4324:	802091fa 	slli	r16,r16,7
    4328:	00041e00 	call	41e0 <decimalToSegm>
    432c:	80a0b03a 	or	r16,r16,r2
    4330:	d4200615 	stw	r16,-32744(gp)
	if (mode == 1 || mode == 2){
    4334:	88bfffc4 	addi	r2,r17,-1
    4338:	108000a8 	cmpgeui	r2,r2,2
    433c:	1000211e 	bne	r2,zero,43c4 <timer_isr+0x15c>
		s_segm = (decimalToSegm(s_tens) << 7) | decimalToSegm(s_unit);
    4340:	d1200a17 	ldw	r4,-32728(gp)
	if (mode == 2){
    4344:	8c4000a0 	cmpeqi	r17,r17,2
		s_segm = (decimalToSegm(s_tens) << 7) | decimalToSegm(s_unit);
    4348:	00041e00 	call	41e0 <decimalToSegm>
    434c:	1021883a 	mov	r16,r2
    4350:	d1200917 	ldw	r4,-32732(gp)
    4354:	802091fa 	slli	r16,r16,7
    4358:	00041e00 	call	41e0 <decimalToSegm>
    435c:	80a0b03a 	or	r16,r16,r2
    4360:	d4200515 	stw	r16,-32748(gp)
	if (mode == 2){
    4364:	88001a1e 	bne	r17,zero,43d0 <timer_isr+0x168>
		min_segm = (decimalToSegm(0) << 7) | decimalToSegm(0);
    4368:	00881004 	movi	r2,8256
    436c:	d0a00415 	stw	r2,-32752(gp)
    4370:	00001f06 	br	43f0 <timer_isr+0x188>
			ms_cent += 1;
    4374:	d0a00d17 	ldw	r2,-32716(gp)
			ms_tens = 0;
    4378:	d0200c15 	stw	zero,-32720(gp)
			ms_cent += 1;
    437c:	10800044 	addi	r2,r2,1
			if (ms_cent >= 10){
    4380:	110002a8 	cmpgeui	r4,r2,10
    4384:	2000021e 	bne	r4,zero,4390 <timer_isr+0x128>
			ms_cent += 1;
    4388:	d0a00d15 	stw	r2,-32716(gp)
    438c:	003fca06 	br	42b8 <timer_isr+0x50>
				s_unit +=1;
    4390:	18800044 	addi	r2,r3,1
				ms_cent = 0;
    4394:	d0200d15 	stw	zero,-32716(gp)
				s_unit +=1;
    4398:	d0a00915 	stw	r2,-32732(gp)
    439c:	003fc606 	br	42b8 <timer_isr+0x50>
			min_unit +=1;
    43a0:	18800044 	addi	r2,r3,1
			s_tens = 0;
    43a4:	d0200a15 	stw	zero,-32728(gp)
			min_unit +=1;
    43a8:	d0a00715 	stw	r2,-32740(gp)
    43ac:	003fcc06 	br	42e0 <timer_isr+0x78>
			min_tens = 0;
    43b0:	d0200815 	stw	zero,-32736(gp)
    43b4:	003fd306 	br	4304 <timer_isr+0x9c>
		ms_segm = (decimalToSegm(0) << 7) | decimalToSegm(0);
    43b8:	00881004 	movi	r2,8256
    43bc:	d0a00615 	stw	r2,-32744(gp)
    43c0:	003fdc06 	br	4334 <timer_isr+0xcc>
		s_segm = (decimalToSegm(0) << 7) | decimalToSegm(0);
    43c4:	00881004 	movi	r2,8256
    43c8:	d0a00515 	stw	r2,-32748(gp)
	if (mode == 2){
    43cc:	003fe606 	br	4368 <timer_isr+0x100>
		min_segm = (decimalToSegm(min_tens) << 7) | decimalToSegm(min_unit);
    43d0:	d1200817 	ldw	r4,-32736(gp)
    43d4:	00041e00 	call	41e0 <decimalToSegm>
    43d8:	1021883a 	mov	r16,r2
    43dc:	d1200717 	ldw	r4,-32740(gp)
    43e0:	802091fa 	slli	r16,r16,7
    43e4:	00041e00 	call	41e0 <decimalToSegm>
    43e8:	80a0b03a 	or	r16,r16,r2
    43ec:	d4200415 	stw	r16,-32752(gp)
	IOWR_ALTERA_AVALON_PIO_DATA(SEGM_MS_0_BASE, ms_segm);
    43f0:	d0a00617 	ldw	r2,-32744(gp)
    43f4:	00941435 	stwio	r2,20560(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(SEGM_S_0_BASE, s_segm);
    43f8:	d0a00517 	ldw	r2,-32748(gp)
    43fc:	00941035 	stwio	r2,20544(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(SEGM_MIN_0_BASE, min_segm);
    4400:	d0a00417 	ldw	r2,-32752(gp)
    4404:	00940c35 	stwio	r2,20528(zero)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
    4408:	00140035 	stwio	zero,20480(zero)
}
    440c:	dfc00217 	ldw	ra,8(sp)
    4410:	dc400117 	ldw	r17,4(sp)
    4414:	dc000017 	ldw	r16,0(sp)
    4418:	dec00304 	addi	sp,sp,12
    441c:	f800283a 	ret

00004420 <button_1_isr>:
}

static void button_1_isr(void *context){
	(void) context;
	//Starting the stopwatch and assigning the mode based on the combination of the switches
	if (start == 0){
    4420:	d0a00217 	ldw	r2,-32760(gp)
    4424:	10000b1e 	bne	r2,zero,4454 <button_1_isr+0x34>
		if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_0_BASE) == 0){
    4428:	00941c37 	ldwio	r2,20592(zero)
    442c:	1000031e 	bne	r2,zero,443c <button_1_isr+0x1c>
}
/*
 * Aux function for the start button of the stopwatch
 */
static void startStopwatch(unsigned mode_n){
	mode = mode_n;
    4430:	d0200115 	stw	zero,-32764(gp)
	start = 1;
    4434:	00800044 	movi	r2,1
    4438:	00000406 	br	444c <button_1_isr+0x2c>
		else if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_0_BASE) == 1){
    443c:	00941c37 	ldwio	r2,20592(zero)
    4440:	10c00058 	cmpnei	r3,r2,1
    4444:	1800061e 	bne	r3,zero,4460 <button_1_isr+0x40>
	mode = mode_n;
    4448:	d0a00115 	stw	r2,-32764(gp)
	start = 1;
    444c:	d0a00215 	stw	r2,-32760(gp)
	play = 1;
    4450:	d0a00315 	stw	r2,-32756(gp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_1_BASE, 0);
    4454:	00140b35 	stwio	zero,20524(zero)
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_1_BASE);
    4458:	00940b37 	ldwio	r2,20524(zero)
}
    445c:	f800283a 	ret
	mode = mode_n;
    4460:	00800084 	movi	r2,2
    4464:	d0a00115 	stw	r2,-32764(gp)
    4468:	003ff206 	br	4434 <button_1_isr+0x14>

0000446c <main>:
{
    446c:	defffd04 	addi	sp,sp,-12
	alt_ic_isr_register(
    4470:	01800034 	movhi	r6,0
    4474:	d8000015 	stw	zero,0(sp)
    4478:	000f883a 	mov	r7,zero
    447c:	31909a04 	addi	r6,r6,17000
    4480:	000b883a 	mov	r5,zero
    4484:	0009883a 	mov	r4,zero
{
    4488:	dfc00215 	stw	ra,8(sp)
    448c:	dc000115 	stw	r16,4(sp)
	alt_ic_isr_register(
    4490:	00044ec0 	call	44ec <alt_ic_isr_register>
	IOWR_ALTERA_AVALON_TIMER_CONTROL(
    4494:	008000c4 	movi	r2,3
    4498:	00940135 	stwio	r2,20484(zero)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_0_BASE, 0xf);
    449c:	040003c4 	movi	r16,15
    44a0:	04141a35 	stwio	r16,20584(zero)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_0_BASE, 0x0);
    44a4:	00141b35 	stwio	zero,20588(zero)
	alt_ic_isr_register(
    44a8:	01800034 	movhi	r6,0
    44ac:	d8000015 	stw	zero,0(sp)
    44b0:	000f883a 	mov	r7,zero
    44b4:	31906f04 	addi	r6,r6,16828
    44b8:	01400044 	movi	r5,1
    44bc:	0009883a 	mov	r4,zero
    44c0:	00044ec0 	call	44ec <alt_ic_isr_register>
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_1_BASE, 0xf);
    44c4:	04140a35 	stwio	r16,20520(zero)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_1_BASE, 0x0);
    44c8:	00140b35 	stwio	zero,20524(zero)
	alt_ic_isr_register(
    44cc:	01800034 	movhi	r6,0
    44d0:	d8000015 	stw	zero,0(sp)
    44d4:	000f883a 	mov	r7,zero
    44d8:	31910804 	addi	r6,r6,17440
    44dc:	01400084 	movi	r5,2
    44e0:	0009883a 	mov	r4,zero
    44e4:	00044ec0 	call	44ec <alt_ic_isr_register>
	while (1);
    44e8:	003fff06 	br	44e8 <main+0x7c>

000044ec <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    44ec:	00045781 	jmpi	4578 <alt_iic_isr_register>

000044f0 <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
    44f0:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    44f4:	00bfff84 	movi	r2,-2
    44f8:	1884703a 	and	r2,r3,r2
    44fc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    4500:	00800044 	movi	r2,1
    4504:	d1200e17 	ldw	r4,-32712(gp)
    4508:	114a983a 	sll	r5,r2,r5
    450c:	290ab03a 	or	r5,r5,r4
    4510:	d1600e15 	stw	r5,-32712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4514:	d0a00e17 	ldw	r2,-32712(gp)
    4518:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
    451c:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    4520:	0005883a 	mov	r2,zero
    4524:	f800283a 	ret

00004528 <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
    4528:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    452c:	00bfff84 	movi	r2,-2
    4530:	1884703a 	and	r2,r3,r2
    4534:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
    4538:	00bfff84 	movi	r2,-2
    453c:	d1200e17 	ldw	r4,-32712(gp)
    4540:	114a183a 	rol	r5,r2,r5
    4544:	290a703a 	and	r5,r5,r4
    4548:	d1600e15 	stw	r5,-32712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    454c:	d0a00e17 	ldw	r2,-32712(gp)
    4550:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
    4554:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    4558:	0005883a 	mov	r2,zero
    455c:	f800283a 	ret

00004560 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    4560:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    4564:	00800044 	movi	r2,1
    4568:	1144983a 	sll	r2,r2,r5
    456c:	10c4703a 	and	r2,r2,r3
}
    4570:	1004c03a 	cmpne	r2,r2,zero
    4574:	f800283a 	ret

00004578 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    4578:	28800808 	cmpgei	r2,r5,32
    457c:	1000161e 	bne	r2,zero,45d8 <alt_iic_isr_register+0x60>
{
    4580:	defffe04 	addi	sp,sp,-8
    4584:	dfc00115 	stw	ra,4(sp)
    4588:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
    458c:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4590:	00bfff84 	movi	r2,-2
    4594:	8084703a 	and	r2,r16,r2
    4598:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    459c:	280690fa 	slli	r3,r5,3
    45a0:	00800034 	movhi	r2,0
    45a4:	10801304 	addi	r2,r2,76
    45a8:	10c5883a 	add	r2,r2,r3
    45ac:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    45b0:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    45b4:	30000626 	beq	r6,zero,45d0 <alt_iic_isr_register+0x58>
    45b8:	00044f00 	call	44f0 <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
    45bc:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    45c0:	dfc00117 	ldw	ra,4(sp)
    45c4:	dc000017 	ldw	r16,0(sp)
    45c8:	dec00204 	addi	sp,sp,8
    45cc:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    45d0:	00045280 	call	4528 <alt_ic_irq_disable>
    45d4:	003ff906 	br	45bc <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
    45d8:	00bffa84 	movi	r2,-22
}
    45dc:	f800283a 	ret

000045e0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    45e0:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    45e4:	00800034 	movhi	r2,0
    45e8:	00c00034 	movhi	r3,0
    45ec:	dfc00015 	stw	ra,0(sp)
    45f0:	10800004 	addi	r2,r2,0
    45f4:	18d1d904 	addi	r3,r3,18276
    45f8:	10c00326 	beq	r2,r3,4608 <alt_load+0x28>
  {
    while( to != end )
    45fc:	01000034 	movhi	r4,0
    4600:	21000104 	addi	r4,r4,4
    4604:	1100141e 	bne	r2,r4,4658 <alt_load+0x78>
  if (to != from)
    4608:	00800034 	movhi	r2,0
    460c:	00c00034 	movhi	r3,0
    4610:	10900804 	addi	r2,r2,16416
    4614:	18d00804 	addi	r3,r3,16416
    4618:	10c00326 	beq	r2,r3,4628 <alt_load+0x48>
    while( to != end )
    461c:	01000034 	movhi	r4,0
    4620:	21106004 	addi	r4,r4,16768
    4624:	1100111e 	bne	r2,r4,466c <alt_load+0x8c>
  if (to != from)
    4628:	00800034 	movhi	r2,0
    462c:	00c00034 	movhi	r3,0
    4630:	10800004 	addi	r2,r2,0
    4634:	18d1d904 	addi	r3,r3,18276
    4638:	10c00326 	beq	r2,r3,4648 <alt_load+0x68>
    while( to != end )
    463c:	01000034 	movhi	r4,0
    4640:	21000004 	addi	r4,r4,0
    4644:	11000e1e 	bne	r2,r4,4680 <alt_load+0xa0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4648:	00046e40 	call	46e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    464c:	dfc00017 	ldw	ra,0(sp)
    4650:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    4654:	00046e81 	jmpi	46e8 <alt_icache_flush_all>
    {
      *to++ = *from++;
    4658:	19400017 	ldw	r5,0(r3)
    465c:	10800104 	addi	r2,r2,4
    4660:	18c00104 	addi	r3,r3,4
    4664:	117fff15 	stw	r5,-4(r2)
    4668:	003fe606 	br	4604 <alt_load+0x24>
    466c:	19400017 	ldw	r5,0(r3)
    4670:	10800104 	addi	r2,r2,4
    4674:	18c00104 	addi	r3,r3,4
    4678:	117fff15 	stw	r5,-4(r2)
    467c:	003fe906 	br	4624 <alt_load+0x44>
    4680:	19400017 	ldw	r5,0(r3)
    4684:	10800104 	addi	r2,r2,4
    4688:	18c00104 	addi	r3,r3,4
    468c:	117fff15 	stw	r5,-4(r2)
    4690:	003fec06 	br	4644 <alt_load+0x64>

00004694 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4694:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4698:	0009883a 	mov	r4,zero
{
    469c:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    46a0:	00046c00 	call	46c0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    46a4:	00046e00 	call	46e0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    46a8:	d1a00f17 	ldw	r6,-32708(gp)
    46ac:	d1601017 	ldw	r5,-32704(gp)
    46b0:	d1201117 	ldw	r4,-32700(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    46b4:	dfc00017 	ldw	ra,0(sp)
    46b8:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    46bc:	000446c1 	jmpi	446c <main>

000046c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    46c0:	deffff04 	addi	sp,sp,-4
    46c4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_0, CPU_0);
    46c8:	000475c0 	call	475c <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    46cc:	00800044 	movi	r2,1
    46d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    46d4:	dfc00017 	ldw	ra,0(sp)
    46d8:	dec00104 	addi	sp,sp,4
    46dc:	f800283a 	ret

000046e0 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
}
    46e0:	f800283a 	ret

000046e4 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    46e4:	f800283a 	ret

000046e8 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    46e8:	f800283a 	ret

000046ec <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    46ec:	213ffe84 	addi	r4,r4,-6
    46f0:	20800428 	cmpgeui	r2,r4,16
    46f4:	1000151e 	bne	r2,zero,474c <alt_exception_cause_generated_bad_addr+0x60>
    46f8:	200890ba 	slli	r4,r4,2
    46fc:	00800034 	movhi	r2,0
    4700:	2085883a 	add	r2,r4,r2
    4704:	1091c317 	ldw	r2,18188(r2)
    4708:	1000683a 	jmp	r2
    470c:	00004754 	movui	zero,285
    4710:	00004754 	movui	zero,285
    4714:	0000474c 	andi	zero,zero,285
    4718:	0000474c 	andi	zero,zero,285
    471c:	0000474c 	andi	zero,zero,285
    4720:	00004754 	movui	zero,285
    4724:	0000474c 	andi	zero,zero,285
    4728:	0000474c 	andi	zero,zero,285
    472c:	00004754 	movui	zero,285
    4730:	00004754 	movui	zero,285
    4734:	0000474c 	andi	zero,zero,285
    4738:	00004754 	movui	zero,285
    473c:	0000474c 	andi	zero,zero,285
    4740:	0000474c 	andi	zero,zero,285
    4744:	0000474c 	andi	zero,zero,285
    4748:	00004754 	movui	zero,285
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    474c:	0005883a 	mov	r2,zero
    4750:	f800283a 	ret
    4754:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    4758:	f800283a 	ret

0000475c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    475c:	000170fa 	wrctl	ienable,zero
}
    4760:	f800283a 	ret
